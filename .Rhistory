source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
install.packages("DescTools")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
install.packages("DescTools")
apt-get install.packages("DescTools")
apt-get install libcurl4-openssl-dev
install.packages("DescTools")
install.packages("DescTools")
install.packages('DescTools')
install.packages("DescTools")
install.packages("DescTools")
install.packages("DescTools")
install.packages("DescTools")
install.packages("DescTools")
install.packages("DescTools")
install.packages("DescTools")
install.packages("DescTools")
install.packages("DescTools")
install.packages("DescTools")
install.packages("DescTools")
install.packages("DescTools")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
source("~/r-code/tendencias centrales.R")
setwd (C:\Users\gomez\Documents\r-code)
source("~/r-code/visualizaciones-varias.R")
setwd ("C:\Users\gomez\Documents\r-code")
set.seed(2018)
x1 = rnorm(100, 10, 2)
y1 = rnorm(100, 5.5)*x
x1 = rnorm(100, 10,2)
y1 = rnorm(100, 5.5)*x
x2 = rnorm(100, 10,1)
y2 = rnorm(100, 3.5)*x1
#histogramas
hist(x1)
hist(x1, main = "Histograma de prueva x", ylab = "Frecuencia")
hist(rnorm(100))
hist(rpois(100, 2.5))
hist(rbinom(100, 20, .25))
hist(rnorm(100))
hist(rpois(100, 2.5))
hist(rweibull(100, 1))
? Distributions
#stem and Leaf
stem(x1)
#stem and Leaf
stem(x1)
summary(x1)
stem(x2)
summary(x2)
#boxplot
boxplot(x1, main = "Boxplot de x1", ylab = "x1")
boxplot(x1, x2)
? boxplot
z = rpois(10, 3)
barplot(z)
? barplot
data()
z = rpois(10, 3)
z
VADeaths
mp <- barplot(VADeaths) # default
tot <- colMeans(VADeaths)
tot <- colMeans(VADeaths)
text(mp, tot + 3, format(tot), xpd = TRUE, col = "blue")
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
legend.text = rownames(VADeaths), ylim = c(0, 100))
mp <- barplot(VADeaths) # default
tot <- colMeans(VADeaths)
text(mp, tot + 3, format(tot), xpd = TRUE, col = "blue")
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
legend.text = rownames(VADeaths), ylim = c(0, 100))
install.packages("dplyr")
install.packages("sampling")
library(sapling)
library(sampling)
library(dplyr)
library(sampling)
library(sampling)
ex
exit
dasdas
library(readxl)
base <- read_excel("C:/Users/gomez/Downloads/base.xlsx")
View(base)
View(base)
base
base
muestra_aleatoria = slice_sample(.data = .base, n = 8, replace = F)
muestra_aleatoria = slice_sample(.data = base, n = 8, replace = F)
muestra_aleatoria = slice_sample(.data = base, n = 8, replace = F)
muestra_aleatoria
muestra_aleatoria = slice_sample(.data = base, n = 8, replace = F)
muestra_aleatoria
set.seed(2)
#base
muestra_aleatoria = slice_sample(.data = base, n = 8, replace = F)
muestra_aleatoria
set.seed(2)
#base
muestra_aleatoria = slice_sample(.data = base, n = 8, replace = F)
muestra_aleatoria
set.seed(10)
muestra_no_pro = strata (data = base, stratanames = c("mivel_estudio"), size = c(3,4,5), method = "srswor")
set.seed(10)
muestra_no_pro = strata (data = base, stratanames = c("nivel_estudio"), size = c(3,4,5), method = "srswor")
set.seed(10)
muestra_no_pro = strata (data = base, stratanames = c("nivel_estudio"), size = c(3,5,4), method = "srswor")
View(base)
set.seed(10)
muestra_no_pro = strata (data = base, stratanames = c("nivel_estudios"), size = c(3,5,4), method = "srswor")
muestra_no_pro
data.frame(table(base$nivel_estudios))
library(dplyr)
library(sampling)
set.seed(10)
muestra_no_pro = strata (data = base, stratanames = c("nivel_estudios"), size = c(3,5,4), method = "srswor")
library(dplyr)
library(sampling)
set.seed(2)
#base
muestra_aleatoria = slice_sample(.data = base, n = 8, replace = F)
muestra_aleatoria
# muestreo aleatorio estratificado no proporcional
set.seed(10)
muestra_no_pro = strata (data = base, stratanames = c("nivel_estudios"), size = c(3,5,4), method = "srswor")
muestra_no_pro
data.frame(table(base$nivel_estudios))
library(readxl)
base <- read_excel("C:/Users/gomez/Downloads/base.xlsx")
View(base)
set.seed(10)
muestra_no_pro = strata (data = base, stratanames = c("nivel_estudios"), size = c(3,5,4), method = "srswor")
muestra_no_pro
data.frame(table(base$nivel_estudios))
View(base)
set.seed(10)
muestra_no_pro = strata (data = base, stratanames = c("nivel_estudios"), size = c(3,5,4), method = "srswor")
muestra_no_pro
data.frame(table(base$nivel_estudios))
View(muestra_no_pro)
nrow(muestra_est_pro)
nrow(muestra_est_pro)
nrow(base)
data.frame(table(base$nivel_estudios))
data.frame(table(muestra_est_pro$nivel_estudios))
data.frame(table(muestra_est_pro$nivel_estudios))
data.frame(table(base$nivel_estudios))
n_superior = sum(with(base, nivel_estudios == "Superior"))/nrow(base)
with(base, nivel_estudios == "Superior"
with(base, nivel_estudios == "Superior")
n_superior = sum(with(base, nivel_estudios == "Superior"))/nrow(base)
n_basico = sum(with(base, nivel_estudios == "Básico"))/nrow(base)
n_mediosuperior = sum(base, nivel_estudios == "Medio Superior")/nrow(base)
muestra_est_pro = strata(data = base, stratanames = c("nivel_estudios"), size = c(round(19*n_superior), round(19*n_basico), round(19*n_mediosuperior)))
n_mediosuperior = sum(with(base, nivel_estudios == "Medio Superior"))/nrow(base)
muestra_est_pro = strata(data = base, stratanames = c("nivel_estudios"), size = c(round(19*n_superior), round(19*n_basico), round(19*n_mediosuperior)))
muestra_est_pro
muestra_est_pro = strata(data = base, stratanames = c("nivel_estudios"), size = c(round(19*n_superior), round(19*n_basico), round(19*n_mediosuperior)), method = c("srswor"))
muestra_est_pro
data.frame(table(muestra_est_pro$nivel_estudios))
library(readxl)
base_trabajadores <- read_excel("C:/Users/gomez/Downloads/base_trabajadores.xlsx")
View(base_trabajadores)
#muestreo  de conglomerado
data.frame(table(base_trabajadores))
#muestreo  de conglomerado
data.frame(table(base_trabajadores$sucursal))
set.seed(10)
cluster(data = base_trabajadores, clustername =  c("sucursal"), size = 4, method = "systematic", description = T )
cluster(data = base_trabajadores, clustername =  c("sucursal"), size = 4, method = "srswor", description = T )
cluster(data = base_trabajadores, clustername =  c("sucursal"), size = 3, method = "srswor", description = T )
# muestreo aleatorio estratificado no proporcional
set.seed(10)
muestra_no_pro = strata (data = base, stratanames = c("nivel_estudios"), size = c(3,5,4), method = "srswor")
library(dplyr)
library(sampling)
set.seed(2)
#base
muestra_aleatoria = slice_sample(.data = base, n = 8, replace = F)
muestra_aleatoria
# muestreo aleatorio estratificado no proporcional
set.seed(10)
muestra_no_pro = strata (data = base, stratanames = c("nivel_estudios"), size = c(3,5,4), method = "srswor")
muestra_no_pro
data.frame(table(base$nivel_estudios))
nrow(base)
data.frame(table(base$nivel_estudios))
n_superior = sum(with(base, nivel_estudios == "Superior"))/nrow(base)
n_basico = sum(with(base, nivel_estudios == "Básico"))/nrow(base)
n_mediosuperior = sum(with(base, nivel_estudios == "Medio Superior"))/nrow(base)
muestra_est_pro = strata(data = base, stratanames = c("nivel_estudios"), size = c(round(19*n_superior), round(19*n_basico), round(19*n_mediosuperior)), method = c("srswor"))
muestra_est_pro
data.frame(table(muestra_est_pro$nivel_estudios))
#muestreo  de conglomerado
data.frame(table(base_trabajadores$sucursal))
set.seed(10)
cluster(data = base_trabajadores, clustername =  c("sucursal"), size = 3, method = "srswor", description = T )
View(muestra_no_pro)
gc()
p05 = read.table(file.choose(),header = T,sep = ";")
library(readxl)
base_de_datos <- read_excel("C:/Users/gomez/Downloads/base de datos.xlsx")
View(base_de_datos)
base_de_datos = read_excel("base de datos.xlsx")
base_de_datos = read_excel("base de datos.xlsx")
matutino = base_de_datos %>% filter(turno == "Matutino")
library(readxl)
library(stats)
matutino = base_de_datos %>% filter(turno == "Matutino")
matutino = base_de_datos %>% filter(turno == "Matutino")
library(dplyr)
library(readxl)
library(stats)
base_de_datos = read_excel("base de datos.xlsx")
matutino = base_de_datos %>% filter(turno == "Matutino")
vespertino = base_de_datos %>% filter(turno == "Vespertino")
shapiro.test(matutino$ansiedad_final)
shapiro.test(vespertino$ansiedad_final)
#prueba de homogeneidad de varianzas
bartlett.test(base_de_datos$ansiedad_final, base_de_datos$turno)
#prueba t de Student para muestras independientes con varianza homagenias
t.test(x = matutino$ansiedad_final, y = vespertino$ansiedad_final,
alternative = "two.aided", paired = F, var.equal = T)
#prueba t de Student para muestras independientes con varianza homagenias
t.test(x = matutino$ansiedad_final, y = vespertino$ansiedad_final,
alternative = "two.sided", paired = F, var.equal = T)
install.packages("nortest")
install.packages("car")
library(dplyr)
library(nortest)
library(stats)
library(car)
library(readxl)
base_de_datos = read_excel("base de datos.xlsx")
matutino = base_de_datos %>% filter(turno == "Matutino")
vespertino = base_de_datos %>% filter(turno == "Vespertino")
shapiro.test(matutino$estres_final)
shapiro.test(vespertino$estres_final)
leveneTest(y = base_de_datos$estres_final, grupo = base_de_datos$turno)
View(matutino)
View(vespertino)
leveneTest(y = base_de_datos$estres_final, grupo = base_de_datos$turno)
install.packages(readxl)
install.packages("readxl")
install.packages("readxl")
install.packages("dplyr")
install.packages("dplyr")
install.packages("stats")
psicologia = base_de_datos %>% filter(licenciatura == "Psicologia")
biologia = base_de_datos %>% filter(licenciatura == "Biologia")
medicina = base_de_datos %>% filter(licenciatura == "Medicina")
shapiro.test(psicologia$estres_final)
shapiro.test(biologia$estres_final)
shapiro.test(medicina$estres_final)
View(base_de_datos)
View(psicologia)
psicología = base_de_datos %>% filter(licenciatura == "Psicologia")
View(psicología)
library(dplyr)
library(nortest)
library(stats)
library(car)
library(readxl)
base_de_datos = read_excel("base de datos.xlsx")
psicologia = base_de_datos %>% filter(licenciatura == "Psicologia")
View(psicologia)
biologia = base_de_datos %>% filter(licenciatura == "Biologia")
View(biologia)
View(psicologia)
library(dplyr)
library(nortest)
library(stats)
library(car)
library(readxl)
base_de_datos = read_excel("base de datos.xlsx")
psicologia = base_de_datos %>% filter(licenciatura == "Psicología")
View(psicologia)
biologia = base_de_datos %>% filter(licenciatura == "Biología")
medicina = base_de_datos %>% filter(licenciatura == "Medicina")
shapiro.test(psicología$estres_final)
shapiro.test(biologia$estres_final)
shapiro.test(medicina$estres_final)
bartlett.test(base_de_datos$estres_final, base_de_datos$licenciatura)
#cual es la probabilidad de que gane 1 vez
dbinom(1, 10, .7)
# de que gane dos veces seguidas
dbinom(5, 10, .7)
#de que gane entre 1 y 3 veces incluidos los dos
p_1 = dbinom(1, 10, .7)
p_2 = dbinom(2, 10, .7)
p_3 = dbinom(3, 10, .7)
p_1 + p_2 + p_3
x = 3
pbinom(3, 10, .7)
pbinom(5, 10, .7)
dbinom(0, 60, .02)
dbinom(5, 60, .02)
1 - pbinom(4, 60, .02)
AMIGA=(2,3,5,8)
AMIGA=(2, 3, 5, 8)
AMIGA=(2 ,3 ,5 ,8)
AMIGA=(2, 3, 5, 8)
AMIGA = (2, 3, 5, 8)
amiga = (2)
amiga = (2, 9)
amiga = (2, b9)
AMIGA = c(1,2,3,4)
print(AMIGA)
AMIGA = (1,2,3,4)
AMIGA = c(1,2,3,4)
